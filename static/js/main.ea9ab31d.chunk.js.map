{"version":3,"sources":["types/simulationStatus.ts","utils/gridUtils.ts","components/agents/Ghost.tsx","components/agents/Agent.tsx","components/Grid.tsx","components/agents/Exit.tsx","utils/positionUtils.ts","utils/useLatestState.ts","components/agents/Player.tsx","components/agents/Tombstone.tsx","components/Environment.tsx","utils/useWindowSize.ts","components/ui/Switch.tsx","components/ui/Button.tsx","components/ui/NumberInput.tsx","components/ui/RangeInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SimulationStatus","GhostDesires","createEmptyGrid","height","width","Array","fill","map","Agent","id","x","y","color","text","viewRadius","displayViewArea","useState","isHovered","setHovered","viewArea","setViewArea","useEffect","newViewArea","_","i","flat","onMouseEnter","onMouseLeave","areaFragment","strokeWidth","stroke","opacity","cornerRadius","align","verticalAlign","fontSize","GRID_CELL_SIZE","Grid","cellSize","cellBorderColor","cellFillColor","rows","cols","cells","row","col","push","key","cell","className","Exit","position","random","max","Math","floor","getNextRandomAvailablePosition","binaryGrid","currentPosition","possibleNextPositions","filter","length","getRandomAvailablePosition","exitPosition","availablePositions","isTargetInViewRadius","source","target","findPath","startCell","endCell","grid","PF","AStarFinder","useLatestState","initialState","state","setState","getState","a","currentState","PlayerDesires","PlayerGender","Ghost","useGhosts","initialBinaryGrid","ghostCount","ghosts","setGhosts","getLatestGhosts","resetGhosts","ghostsToCreate","keys","randomPosition","isFound","isWandering","desire","Wander","t","inferDesires","ghost","players","some","player","ChasePlayers","updateGhosts","ghostsToUpdate","wander","pathsToAllPlayers","p","binaryGridClone","JSON","parse","stringify","slice","pathToClosestPlayer","reduce","closestPath","currentPath","Infinity","chasePlayers","isEscaping","Player","isNotifyingGhostFound","isCaught","Male","gender","setGender","icon","setIcon","Female","usePlayers","playerCount","setPlayers","getLatestPlayers","resetPlayers","playersToCreate","TurnIntoGhost","Escape","g","NotifyGhostFound","escapeToExit","pathToExit","updatePlayers","playersInGame","notifyGhostFound","playerTurnedToGhost","isTurnedToGhost","turnIntoGhost","Tombstone","Environment","tombstoneCount","gridSize","simulationStatus","displayAgentsViewArea","resetCount","simulationSpeed","incrementCycleCount","windowSize","undefined","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","stageUniformScale","setStageUniformScale","tombstones","setTombstones","New","tombstonesToCreate","renderedTombstones","tombstone","useTombstones","isMobileOrTablet","Running","forEach","getBinaryGrid","reasoningLoopTimeout","setTimeout","clearTimeout","scale","SwitchWrapper","styled","div","ToggleWrapper","InnerButton","selected","css","Switch","onChange","label","onClick","StyledButton","button","props","backgroundColor","Button","buttonStyles","Wrapper","ButtonWrapper","Input","input","DecrementButton","IncrementButton","NumberInput","value","minValue","maxValue","disabled","onClickIncrement","onClickDecrement","type","min","e","parseInt","isNaN","RangeIndicator","InputWrapper","Range","RangeInput","step","valueIndicatorRef","useRef","inputRef","current","newValue","Number","newPosition","style","left","ref","FullSizeWrapper","ContentWrapper","SettingsWrapper","SettingsHeader","SettingsContent","Title","Subtitle","span","Description","Actions","Link","GhostText","PlayerText","GRID_SIZE","EXIT_POSITION","App","setSimulationStatus","setDisplayAgentsViewArea","MAX_TOMBSTONES_COUNT","setTombstoneCount","MAX_PLAYER_COUNT","setPlayerCount","MAX_GHOST_COUNT","setGhostCount","setResetCount","setSimulationSpeed","cycleCount","setCycleCount","isSimulationNew","isSimulationPaused","Paused","isSimulationRunning","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea9ab31d.chunk.js","sourcesContent":["export enum SimulationStatus {\r\n  Running,\r\n  Paused,\r\n  New\r\n}\r\n","export const createEmptyGrid = (height: number, width: number) =>\r\n  new Array(height).fill(0).map(() => new Array(width).fill(0));\r\n","import React, { FC, useEffect } from \"react\";\r\nimport { Position } from \"../../types/position\";\r\nimport {\r\n  findPath,\r\n  getNextRandomAvailablePosition,\r\n  getRandomAvailablePosition,\r\n  isTargetInViewRadius\r\n} from \"../../utils/positionUtils\";\r\nimport { useLatestState } from \"../../utils/useLatestState\";\r\nimport { GRID_CELL_SIZE } from \"../Grid\";\r\nimport { Agent } from \"./Agent\";\r\nimport { PlayerBeliefs } from \"./Player\";\r\n\r\nexport enum GhostDesires {\r\n  Wander,\r\n  ChasePlayers\r\n}\r\n\r\nconst GHOST_VIEW_RADIUS = 1;\r\n\r\nexport interface GhostBeliefs {\r\n  id: number;\r\n  position: Position;\r\n  desire: GhostDesires;\r\n  isWandering?: boolean;\r\n  isFound?: boolean;\r\n  displayViewArea?: boolean;\r\n}\r\n\r\nexport const Ghost: FC<GhostBeliefs> = ({\r\n  id,\r\n  position,\r\n  displayViewArea = false\r\n}) => {\r\n  return (\r\n    <Agent\r\n      id={id}\r\n      x={position.x * GRID_CELL_SIZE}\r\n      y={position.y * GRID_CELL_SIZE}\r\n      width={GRID_CELL_SIZE}\r\n      height={GRID_CELL_SIZE}\r\n      color=\"#CC5A71\"\r\n      text={`👻`}\r\n      viewRadius={1}\r\n      displayViewArea={displayViewArea}\r\n    />\r\n  );\r\n};\r\n\r\nexport const useGhosts = (\r\n  initialBinaryGrid: number[][],\r\n  exitPosition: Position,\r\n  ghostCount: number\r\n) => {\r\n  const [ghosts, setGhosts, getLatestGhosts] = useLatestState<GhostBeliefs[]>(\r\n    []\r\n  );\r\n\r\n  const resetGhosts = () => {\r\n    const ghostsToCreate: GhostBeliefs[] = [...Array(ghostCount).keys()].map(\r\n      i => {\r\n        const randomPosition = getRandomAvailablePosition(\r\n          initialBinaryGrid,\r\n          exitPosition\r\n        );\r\n\r\n        if (randomPosition) {\r\n          initialBinaryGrid[randomPosition.y][randomPosition.x] = 1;\r\n        }\r\n\r\n        return {\r\n          id: i,\r\n          position: randomPosition,\r\n          isFound: false,\r\n          isWandering: true,\r\n          desire: GhostDesires.Wander\r\n        };\r\n      }\r\n    );\r\n\r\n    setGhosts(ghostsToCreate.filter(t => t.position));\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetGhosts();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [ghostCount]);\r\n\r\n  const inferDesires = (\r\n    ghost: GhostBeliefs,\r\n    players: PlayerBeliefs[]\r\n  ): GhostDesires => {\r\n    if (\r\n      ghost.isWandering &&\r\n      players.some(\r\n        player =>\r\n          player.isWandering &&\r\n          isTargetInViewRadius(\r\n            ghost.position,\r\n            player.position,\r\n            GHOST_VIEW_RADIUS\r\n          )\r\n      )\r\n    ) {\r\n      return GhostDesires.ChasePlayers;\r\n    }\r\n\r\n    if (ghost.isWandering) {\r\n      return GhostDesires.Wander;\r\n    }\r\n\r\n    return ghost.desire;\r\n  };\r\n\r\n  const wander = (binaryGrid: number[][], ghost: GhostBeliefs) => {\r\n    const randomPosition = getNextRandomAvailablePosition(\r\n      binaryGrid,\r\n      ghost.position\r\n    );\r\n\r\n    if (randomPosition) {\r\n      binaryGrid[randomPosition.y][randomPosition.x] = 1;\r\n      binaryGrid[ghost.position.y][ghost.position.x] = 0;\r\n    }\r\n\r\n    return {\r\n      ...ghost,\r\n      position: randomPosition ?? ghost.position\r\n    };\r\n  };\r\n\r\n  const chasePlayers = (\r\n    binaryGrid: number[][],\r\n    ghost: GhostBeliefs,\r\n    players: PlayerBeliefs[]\r\n  ) => {\r\n    const pathsToAllPlayers = players.map(p => {\r\n      // INFO: Dirty fix to make sure the target player is a \"walkable\" cell\r\n      const binaryGridClone = JSON.parse(JSON.stringify(binaryGrid));\r\n      binaryGridClone[p.position.y][p.position.x] = 0;\r\n\r\n      return findPath(binaryGridClone, ghost.position, p.position)?.slice(\r\n        1\r\n      )?.[0];\r\n    });\r\n\r\n    if (pathsToAllPlayers[0]?.length > 0) {\r\n      const pathToClosestPlayer = pathsToAllPlayers.reduce(\r\n        (closestPath, currentPath) =>\r\n          currentPath?.length > closestPath?.length ? currentPath : closestPath,\r\n        pathsToAllPlayers[0] ?? Infinity\r\n      );\r\n\r\n      if (pathToClosestPlayer) {\r\n        return {\r\n          ...ghost,\r\n          position: { x: pathToClosestPlayer[0], y: pathToClosestPlayer[1] },\r\n          isFound: true,\r\n          isWandering: false\r\n        };\r\n      }\r\n    }\r\n\r\n    return { ...ghost, isWandering: false, isFound: true };\r\n  };\r\n\r\n  const updateGhosts = (binaryGrid: number[][], players: PlayerBeliefs[]) => {\r\n    const ghostsToUpdate = ghosts\r\n      .map(ghost => ({ ...ghost, desire: inferDesires(ghost, players) }))\r\n      .map(ghost => {\r\n        if (ghost.desire === GhostDesires.Wander) {\r\n          return wander(binaryGrid, ghost);\r\n        } else if (ghost.desire === GhostDesires.ChasePlayers) {\r\n          return chasePlayers(\r\n            binaryGrid,\r\n            ghost,\r\n            players.filter(p => p.isEscaping)\r\n          );\r\n        }\r\n\r\n        return ghost;\r\n      });\r\n\r\n    setGhosts(ghostsToUpdate);\r\n  };\r\n\r\n  return { ghosts, getLatestGhosts, setGhosts, updateGhosts, resetGhosts };\r\n};\r\n","import React, { FC, useEffect, useState } from \"react\";\r\nimport { Group, Rect, Text } from \"react-konva\";\r\nimport { Position } from \"../../types/position\";\r\n\r\ninterface Props {\r\n  id: number;\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  color: string;\r\n  text: string;\r\n  viewRadius?: number;\r\n  displayViewArea?: boolean;\r\n}\r\n\r\nexport const Agent: FC<Props> = ({\r\n  id,\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  color,\r\n  text,\r\n  viewRadius = 0,\r\n  displayViewArea = false\r\n}) => {\r\n  const [isHovered, setHovered] = useState<boolean>(false);\r\n  const [viewArea, setViewArea] = useState<Position[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (!displayViewArea) {\r\n      setViewArea([]);\r\n\r\n      return;\r\n    }\r\n\r\n    const newViewArea = [...Array(viewRadius)]\r\n      .map((_, i) => [\r\n        { x: 0, y: -height * (i + 1) },\r\n        { x: width * (i + 1), y: 0 },\r\n        { x: 0, y: height * (i + 1) },\r\n        { x: -width * (i + 1), y: 0 }\r\n      ])\r\n      .flat();\r\n\r\n    setViewArea(newViewArea);\r\n  }, [height, viewRadius, width, displayViewArea]);\r\n\r\n  return (\r\n    <Group\r\n      x={x}\r\n      y={y}\r\n      onMouseEnter={() => setHovered(true)}\r\n      onMouseLeave={() => setHovered(false)}>\r\n      {viewArea.map((areaFragment, i) => (\r\n        <Rect\r\n          key={i}\r\n          x={areaFragment.x}\r\n          y={areaFragment.y}\r\n          height={height}\r\n          width={width}\r\n          strokeWidth={10}\r\n          stroke=\"#35363A\"\r\n          fill={color}\r\n          opacity={0.2}\r\n          cornerRadius={10}\r\n        />\r\n      ))}\r\n      <Rect\r\n        width={width}\r\n        height={height}\r\n        fill={color}\r\n        strokeWidth={10}\r\n        stroke=\"#35363A\"\r\n        cornerRadius={10}\r\n      />\r\n      <Text\r\n        text={isHovered ? `#${id}` : text}\r\n        align=\"center\"\r\n        verticalAlign=\"middle\"\r\n        width={width}\r\n        height={height}\r\n        fill=\"#fff\"\r\n        fontSize={16}\r\n      />\r\n    </Group>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { Group, Rect } from \"react-konva\";\r\n\r\nexport interface GridSize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport const GRID_CELL_SIZE = 50;\r\n\r\ninterface Props {\r\n  cellSize: number;\r\n  cellBorderColor: string;\r\n  cellFillColor: string;\r\n  rows: number;\r\n  cols: number;\r\n}\r\n\r\nexport const Grid: FC<Props> = ({\r\n  cellSize,\r\n  cellBorderColor,\r\n  cellFillColor,\r\n  rows,\r\n  cols\r\n}) => {\r\n  const cells = [];\r\n\r\n  for (let row = 0; row < rows; row++) {\r\n    for (let col = 0; col < cols; col++) {\r\n      cells.push({\r\n        row: row * cellSize,\r\n        col: col * cellSize,\r\n        key: `cell-${row}-${col}`\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Group>\r\n      {cells.map(cell => (\r\n        <Rect\r\n          x={cell.col}\r\n          y={cell.row}\r\n          width={cellSize}\r\n          height={cellSize}\r\n          key={cell.key}\r\n          stroke={cellBorderColor}\r\n          strokeWidth={10}\r\n          fill={cellFillColor}\r\n          className=\"m-5\"\r\n          opacity={0.5}\r\n          cornerRadius={10}\r\n        />\r\n      ))}\r\n    </Group>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { Position } from \"../../types/position\";\r\nimport { Agent } from \"./Agent\";\r\nimport { GRID_CELL_SIZE } from \"../Grid\";\r\n\r\nexport interface ExitBeliefs {\r\n  id: number;\r\n  position: Position;\r\n}\r\n\r\nexport const Exit: FC<ExitBeliefs> = ({\r\n  id,\r\n  position,\r\n}) => {\r\n  return (\r\n    <Agent\r\n      id={id}\r\n      x={position.x * GRID_CELL_SIZE}\r\n      y={position.y * GRID_CELL_SIZE}\r\n      width={GRID_CELL_SIZE}\r\n      height={GRID_CELL_SIZE}\r\n      color=\"#0dab76\"\r\n      text=\"\"\r\n    />\r\n  );\r\n};\r\n","import PF from \"pathfinding\";\r\nimport { Position } from \"../types/position\";\r\n\r\nconst random = (max: number) => Math.floor(Math.random() * max);\r\n\r\nexport const getNextRandomAvailablePosition = (\r\n  binaryGrid: number[][],\r\n  currentPosition: Position\r\n) => {\r\n  const { x, y } = currentPosition;\r\n\r\n  // INFO: Move Up, Down, Left or Right\r\n  const possibleNextPositions = [\r\n    { x, y: y - 1 },\r\n    { x: x + 1, y },\r\n    { x, y: y + 1 },\r\n    { x: x - 1, y }\r\n  ].filter(({ x, y }) => binaryGrid[y]?.[x] === 0);\r\n\r\n  const randomMovementDirection = random(possibleNextPositions.length);\r\n\r\n  return possibleNextPositions[randomMovementDirection];\r\n};\r\n\r\n// TODO: Use \"E\" as a marker on the grid for the exit instead of passing it as a parameter\r\nexport const getRandomAvailablePosition = (\r\n  binaryGrid: number[][],\r\n  exitPosition: Position\r\n) => {\r\n  const availablePositions: Position[] = [];\r\n\r\n  for (let row = 0; row < binaryGrid.length; row++) {\r\n    for (let col = 0; col < binaryGrid[row].length; col++) {\r\n      if (\r\n        !binaryGrid[row][col] &&\r\n        !(row === exitPosition.y && col === exitPosition.x)\r\n      ) {\r\n        availablePositions.push({ x: col, y: row });\r\n      }\r\n    }\r\n  }\r\n\r\n  return availablePositions[random(availablePositions.length)];\r\n};\r\n\r\nexport const isTargetInViewRadius = (\r\n  source: Position,\r\n  target: Position,\r\n  viewRadius: number\r\n) => {\r\n  return (\r\n    (source.x === target.x && source.y + viewRadius === target.y) ||\r\n    (source.y === target.y && source.x + viewRadius === target.x) ||\r\n    (source.x === target.x && source.y - viewRadius === target.y) ||\r\n    (source.y === target.y && source.x - viewRadius === target.x)\r\n  );\r\n};\r\n\r\nexport const findPath = (\r\n  binaryGrid: number[][],\r\n  startCell: Position,\r\n  endCell: Position\r\n): number[][] => {\r\n  const grid = new PF.Grid(binaryGrid);\r\n\r\n  const finder = new PF.AStarFinder();\r\n  const path = finder.findPath(\r\n    startCell.x,\r\n    startCell.y,\r\n    endCell.x,\r\n    endCell.y,\r\n    grid\r\n  );\r\n\r\n  return path;\r\n};","import { useState } from \"react\";\r\n\r\nexport const useLatestState = <State = any>(\r\n  initialState: State | (() => State)\r\n) => {\r\n  const [state, setState] = useState<State>(initialState);\r\n\r\n  const getState = async (): Promise<State> => {\r\n    let state: unknown;\r\n\r\n    await setState((currentState: State) => {\r\n      state = currentState;\r\n\r\n      return currentState;\r\n    });\r\n\r\n    return state as State;\r\n  };\r\n\r\n  return [state, setState, getState] as [\r\n    State,\r\n    typeof setState,\r\n    typeof getState\r\n  ];\r\n};\r\n","import React, { FC, useEffect, useState } from \"react\";\r\nimport { Position } from \"../../types/position\";\r\nimport {\r\n  findPath,\r\n  getNextRandomAvailablePosition,\r\n  getRandomAvailablePosition,\r\n  isTargetInViewRadius\r\n} from \"../../utils/positionUtils\";\r\nimport { useLatestState } from \"../../utils/useLatestState\";\r\nimport { GRID_CELL_SIZE } from \"../Grid\";\r\nimport { Agent } from \"./Agent\";\r\nimport { GhostBeliefs, GhostDesires } from \"./Ghost\";\r\n\r\nexport enum PlayerDesires {\r\n  Wander,\r\n  Escape,\r\n  NotifyGhostFound,\r\n  TurnIntoGhost\r\n}\r\n\r\nenum PlayerGender {\r\n  Male,\r\n  Female\r\n}\r\n\r\nconst PLAYER_VIEW_RADIUS = 1;\r\n\r\nexport interface PlayerBeliefs {\r\n  id: number;\r\n  position: Position;\r\n  desire: PlayerDesires;\r\n  isWandering?: boolean;\r\n  isEscaping?: boolean;\r\n  isNotifyingGhostFound?: boolean;\r\n  isCaught?: boolean;\r\n  isTurnedToGhost?: boolean;\r\n  displayViewArea?: boolean;\r\n}\r\n\r\nexport const Player: FC<PlayerBeliefs> = ({\r\n  id,\r\n  position,\r\n  isEscaping = false,\r\n  isNotifyingGhostFound = false,\r\n  isCaught = false,\r\n  displayViewArea = false\r\n}) => {\r\n  const [gender, setGender] = useState<PlayerGender>(PlayerGender.Male);\r\n  const [icon, setIcon] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    const gender =\r\n      Math.random() > 0.5 ? PlayerGender.Male : PlayerGender.Female;\r\n\r\n    setGender(gender);\r\n    setIcon(gender === PlayerGender.Male ? \"🚶‍♂️\" : \"🚶‍♀️\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isEscaping) {\r\n      setIcon(gender === PlayerGender.Male ? \"🏃‍♂️\" : \"🏃‍♀️\");\r\n    }\r\n  }, [gender, isEscaping]);\r\n\r\n  useEffect(() => {\r\n    if (isNotifyingGhostFound) {\r\n      setIcon(gender === PlayerGender.Male ? \"🧍‍♂️\" : \"🧍‍♀️\");\r\n    }\r\n  }, [gender, isNotifyingGhostFound]);\r\n\r\n  return (\r\n    <Agent\r\n      id={id}\r\n      x={position.x * GRID_CELL_SIZE}\r\n      y={position.y * GRID_CELL_SIZE}\r\n      width={GRID_CELL_SIZE}\r\n      height={GRID_CELL_SIZE}\r\n      color={\r\n        isNotifyingGhostFound ? \"#ffee88\" : isCaught ? \"#CC5A71\" : \"#0a9dae\"\r\n      }\r\n      text={icon}\r\n      viewRadius={PLAYER_VIEW_RADIUS}\r\n      displayViewArea={displayViewArea}\r\n    />\r\n  );\r\n};\r\n\r\nexport const usePlayers = (\r\n  binaryGrid: number[][],\r\n  exitPosition: Position,\r\n  playerCount: number\r\n) => {\r\n  const [players, setPlayers, getLatestPlayers] = useLatestState<\r\n    PlayerBeliefs[]\r\n  >([]);\r\n\r\n  const resetPlayers = () => {\r\n    const playersToCreate: PlayerBeliefs[] = [...Array(playerCount).keys()].map(\r\n      i => {\r\n        const randomPosition = getRandomAvailablePosition(\r\n          binaryGrid,\r\n          exitPosition\r\n        );\r\n\r\n        if (randomPosition) {\r\n          binaryGrid[randomPosition.y][randomPosition.x] = 1;\r\n        }\r\n\r\n        return {\r\n          id: i,\r\n          position: randomPosition,\r\n          isWandering: true,\r\n          isEscaping: false,\r\n          isNotifyingGhostFound: false,\r\n          isCaught: false,\r\n          desire: PlayerDesires.Wander\r\n        };\r\n      }\r\n    );\r\n\r\n    setPlayers(playersToCreate);\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetPlayers();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [playerCount]);\r\n\r\n  const inferDesires = (\r\n    player: PlayerBeliefs,\r\n    ghosts: GhostBeliefs[]\r\n  ): PlayerDesires => {\r\n    if (player.isCaught) {\r\n      return PlayerDesires.TurnIntoGhost;\r\n    }\r\n\r\n    if (players.some(p => p.isNotifyingGhostFound && p.id !== player.id)) {\r\n      return PlayerDesires.Escape;\r\n    }\r\n\r\n    if (\r\n      ghosts.some(g =>\r\n        isTargetInViewRadius(player.position, g.position, PLAYER_VIEW_RADIUS)\r\n      ) &&\r\n      player.isWandering &&\r\n      !players.some(p => p.isNotifyingGhostFound)\r\n    ) {\r\n      return PlayerDesires.NotifyGhostFound;\r\n    }\r\n\r\n    return player.desire;\r\n  };\r\n\r\n  const wander = (binaryGrid: number[][], player: PlayerBeliefs) => {\r\n    const randomPosition = getNextRandomAvailablePosition(\r\n      binaryGrid,\r\n      player.position\r\n    );\r\n\r\n    if (randomPosition) {\r\n      binaryGrid[randomPosition.y][randomPosition.x] = 1;\r\n      binaryGrid[player.position.y][player.position.x] = 0;\r\n    }\r\n\r\n    return {\r\n      ...player,\r\n      position: randomPosition ?? player.position\r\n    };\r\n  };\r\n\r\n  const escapeToExit = (\r\n    binaryGrid: number[][],\r\n    player: PlayerBeliefs,\r\n    ghosts: GhostBeliefs[]\r\n  ) => {\r\n    const pathToExit = findPath(\r\n      binaryGrid,\r\n      player.position,\r\n      exitPosition\r\n    )?.slice(1)?.[0];\r\n\r\n    if (!player.isNotifyingGhostFound && pathToExit?.length > 0) {\r\n      const isPlayerCaughtByGhost = ghosts.some(g =>\r\n        isTargetInViewRadius(player.position, g.position, PLAYER_VIEW_RADIUS)\r\n      );\r\n      if (isPlayerCaughtByGhost) {\r\n        return {\r\n          ...player,\r\n          isCaught: true,\r\n          isEscaping: false,\r\n          isWandering: false\r\n        };\r\n      }\r\n\r\n      return {\r\n        ...player,\r\n        position: { x: pathToExit[0], y: pathToExit[1] },\r\n        isEscaping: true\r\n      };\r\n    }\r\n\r\n    return player;\r\n  };\r\n\r\n  const notifyGhostFound = (player: PlayerBeliefs) => {\r\n    return {\r\n      ...player,\r\n      isNotifyingGhostFound: true,\r\n      isWandering: false\r\n    };\r\n  };\r\n\r\n  const turnIntoGhost = (\r\n    player: PlayerBeliefs,\r\n    ghosts: GhostBeliefs[],\r\n    setGhosts: (ghosts: GhostBeliefs[]) => void\r\n  ) => {\r\n    const playerTurnedToGhost: GhostBeliefs = {\r\n      id: ghosts.length,\r\n      desire: GhostDesires.Wander,\r\n      position: player.position,\r\n      displayViewArea: player.displayViewArea\r\n    };\r\n    setGhosts([...ghosts, playerTurnedToGhost]);\r\n\r\n    return {\r\n      ...player,\r\n      isWandering: false,\r\n      isTurnedToGhost: true\r\n    };\r\n  };\r\n\r\n  const updatePlayers = (\r\n    binaryGrid: number[][],\r\n    exitPosition: Position,\r\n    ghosts: GhostBeliefs[],\r\n    setGhosts: (ghosts: GhostBeliefs[]) => void\r\n  ) => {\r\n    const playersToUpdate = players\r\n      .map(player => ({\r\n        ...player,\r\n        desire: inferDesires(player, ghosts)\r\n      }))\r\n      .map(player => {\r\n        if (player.desire === PlayerDesires.Wander) {\r\n          return wander(binaryGrid, player);\r\n        } else if (player.desire === PlayerDesires.NotifyGhostFound) {\r\n          return notifyGhostFound(player);\r\n        } else if (player.desire === PlayerDesires.Escape) {\r\n          return escapeToExit(binaryGrid, player, ghosts);\r\n        } else if (player.desire === PlayerDesires.TurnIntoGhost) {\r\n          return turnIntoGhost(player, ghosts, setGhosts);\r\n        }\r\n\r\n        return player;\r\n      });\r\n\r\n    const playersInGame = playersToUpdate.filter(\r\n      p =>\r\n        !(\r\n          p.isEscaping &&\r\n          p.position.x === exitPosition.x &&\r\n          p.position.y === exitPosition.y\r\n        ) && !p.isTurnedToGhost\r\n    );\r\n\r\n    setPlayers(playersInGame);\r\n  };\r\n\r\n  return { players, setPlayers, getLatestPlayers, updatePlayers, resetPlayers };\r\n};\r\n","import React, { FC, useEffect, useState } from \"react\";\r\nimport { Position } from \"../../types/position\";\r\nimport { getRandomAvailablePosition } from \"../../utils/positionUtils\";\r\nimport { GRID_CELL_SIZE } from \"../Grid\";\r\nimport { Agent } from \"./Agent\";\r\nimport { SimulationStatus } from \"../../types/simulationStatus\";\r\n\r\nexport interface TombstoneBeliefs {\r\n  id: number;\r\n  position: Position;\r\n}\r\n\r\nexport const Tombstone: FC<TombstoneBeliefs> = ({ id, position }) => {\r\n  return (\r\n    <Agent\r\n      id={id}\r\n      x={position.x * GRID_CELL_SIZE}\r\n      y={position.y * GRID_CELL_SIZE}\r\n      width={GRID_CELL_SIZE}\r\n      height={GRID_CELL_SIZE}\r\n      color=\"#292A2D\"\r\n      text=\"⬛\"\r\n    />\r\n  );\r\n};\r\n\r\nexport const useTombstones = (\r\n  binaryGrid: number[][],\r\n  exitPosition: Position,\r\n  tombstoneCount: number,\r\n  simulationStatus: SimulationStatus\r\n) => {\r\n  const [tombstones, setTombstones] = useState<TombstoneBeliefs[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (simulationStatus !== SimulationStatus.New) {\r\n      return;\r\n    }\r\n    \r\n    const tombstonesToCreate: TombstoneBeliefs[] = [\r\n      ...Array(tombstoneCount).keys()\r\n    ].map(i => {\r\n      const randomPosition = getRandomAvailablePosition(\r\n        binaryGrid,\r\n        exitPosition\r\n      );\r\n\r\n      if (randomPosition) {\r\n        binaryGrid[randomPosition.y][randomPosition.x] = 1;\r\n      }\r\n\r\n      return {\r\n        id: i,\r\n        position: randomPosition\r\n      };\r\n    });\r\n\r\n    setTombstones(tombstonesToCreate.filter(t => t.position));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [tombstoneCount, simulationStatus]);\r\n\r\n  const renderedTombstones = tombstones.map(tombstone => (\r\n    <Tombstone\r\n      key={tombstone.id}\r\n      id={tombstone.id}\r\n      position={tombstone.position}\r\n    />\r\n  ));\r\n\r\n  return { tombstones, setTombstones, renderedTombstones };\r\n};\r\n","import React, { FC, useEffect, useState } from \"react\";\r\nimport { Layer, Stage } from \"react-konva\";\r\nimport { Position } from \"../types/position\";\r\nimport { SimulationStatus } from \"../types/simulationStatus\";\r\nimport { createEmptyGrid } from \"../utils/gridUtils\";\r\nimport { Exit } from \"./agents/Exit\";\r\nimport { Ghost, useGhosts } from \"./agents/Ghost\";\r\nimport { Player, usePlayers } from \"./agents/Player\";\r\nimport { useTombstones } from \"./agents/Tombstone\";\r\nimport { Grid, GridSize, GRID_CELL_SIZE } from \"./Grid\";\r\nimport { useWindowSize } from \"../utils/useWindowSize\";\r\n\r\ninterface Props {\r\n  ghostCount: number;\r\n  playerCount: number;\r\n  tombstoneCount: number;\r\n  exitPosition: Position;\r\n  gridSize: GridSize;\r\n  simulationStatus: SimulationStatus;\r\n  displayAgentsViewArea: boolean;\r\n  resetCount: number;\r\n  simulationSpeed: number;\r\n  incrementCycleCount: () => void;\r\n}\r\n\r\nexport const Environment: FC<Props> = ({\r\n  ghostCount,\r\n  playerCount,\r\n  tombstoneCount,\r\n  exitPosition,\r\n  gridSize,\r\n  simulationStatus,\r\n  displayAgentsViewArea,\r\n  resetCount,\r\n  simulationSpeed,\r\n  incrementCycleCount\r\n}) => {\r\n  const windowSize = useWindowSize();\r\n  const [stageUniformScale, setStageUniformScale] = useState<number>(1);\r\n\r\n  const binaryGrid = createEmptyGrid(gridSize.height, gridSize.width);\r\n\r\n  const { tombstones, renderedTombstones } = useTombstones(\r\n    binaryGrid,\r\n    exitPosition,\r\n    tombstoneCount,\r\n    simulationStatus\r\n  );\r\n  const {\r\n    ghosts,\r\n    updateGhosts,\r\n    setGhosts,\r\n    getLatestGhosts,\r\n    resetGhosts\r\n  } = useGhosts(binaryGrid, exitPosition, ghostCount);\r\n  const { players, updatePlayers, resetPlayers } = usePlayers(\r\n    binaryGrid,\r\n    exitPosition,\r\n    playerCount\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!windowSize?.width) {\r\n      return;\r\n    }\r\n\r\n    const isMobileOrTablet = windowSize?.width < 1024;\r\n\r\n    setStageUniformScale(isMobileOrTablet ? 0.7 : 1);\r\n  }, [windowSize]);\r\n\r\n  useEffect(\r\n    () => {\r\n      const getBinaryGrid = (): number[][] => {\r\n        let grid = createEmptyGrid(gridSize.height, gridSize.width);\r\n\r\n        ghosts.forEach(ghost => {\r\n          grid[ghost.position.y][ghost.position.x] = 1;\r\n        });\r\n        players.forEach(player => {\r\n          grid[player.position.y][player.position.x] = 1;\r\n        });\r\n        tombstones.forEach(tombstone => {\r\n          grid[tombstone.position.y][tombstone.position.x] = 1;\r\n        });\r\n\r\n        return grid;\r\n      };\r\n\r\n      if (simulationStatus !== SimulationStatus.Running) {\r\n        return;\r\n      }\r\n\r\n      const binaryGrid = getBinaryGrid();\r\n      const reasoningLoopTimeout = setTimeout(async () => {\r\n        incrementCycleCount();\r\n        updateGhosts(binaryGrid, players);\r\n        updatePlayers(\r\n          binaryGrid,\r\n          exitPosition,\r\n          await getLatestGhosts(),\r\n          setGhosts\r\n        );\r\n      }, 1400 - 400 * simulationSpeed);\r\n\r\n      return () => {\r\n        clearTimeout(reasoningLoopTimeout);\r\n      };\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [ghosts, players, tombstones, simulationStatus, simulationSpeed]\r\n  );\r\n\r\n  useEffect(() => {\r\n    resetGhosts();\r\n    resetPlayers();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [resetCount]);\r\n\r\n  return (\r\n    <Stage\r\n      scale={{ x: stageUniformScale, y: stageUniformScale }}\r\n      width={gridSize.width * GRID_CELL_SIZE * stageUniformScale}\r\n      height={gridSize.height * GRID_CELL_SIZE * stageUniformScale}>\r\n      <Layer>\r\n        <Grid\r\n          cellSize={GRID_CELL_SIZE}\r\n          rows={gridSize.height}\r\n          cols={gridSize.width}\r\n          cellBorderColor=\"#35363A\"\r\n          cellFillColor=\"#1D1D20\"\r\n        />\r\n\r\n        <Exit id={0} position={exitPosition} />\r\n\r\n        {renderedTombstones}\r\n\r\n        {ghosts.map(ghost => (\r\n          <Ghost\r\n            {...ghost}\r\n            key={ghost.id}\r\n            displayViewArea={displayAgentsViewArea}\r\n          />\r\n        ))}\r\n\r\n        {players.map(player => (\r\n          <Player\r\n            key={player.id}\r\n            id={player.id}\r\n            position={player.position}\r\n            desire={player.desire}\r\n            isEscaping={player.isEscaping}\r\n            isNotifyingGhostFound={player.isNotifyingGhostFound}\r\n            isCaught={player.isCaught}\r\n            displayViewArea={displayAgentsViewArea}\r\n          />\r\n        ))}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\ninterface WindowSize {\r\n  width: number | undefined;\r\n  height: number | undefined;\r\n}\r\n\r\nexport const useWindowSize = () => {\r\n  const [windowSize, setWindowSize] = useState<WindowSize>({\r\n    width: undefined,\r\n    height: undefined\r\n  });\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n      });\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    handleResize();\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowSize;\r\n};\r\n","import React, { FC } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst SwitchWrapper = styled.div`\r\n  display: flex;\r\n  justify-items: center;\r\n  gap: 16px;\r\n  line-height: 1.2;\r\n  color: #aaaaaa;\r\n`;\r\n\r\nconst ToggleWrapper = styled.div`\r\n  width: 36px;\r\n  background-color: #1d1d20;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  border-radius: 50px;\r\n  padding: 4px;\r\n  height: 16px;\r\n  position: relative;\r\n  display: inline-flex;\r\n  align-items: center;\r\n\r\n  opacity: 0.5;\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst InnerButton = styled.div<{ selected: boolean }>`\r\n  height: 16px;\r\n  width: 16px;\r\n  font-size: 0.5rem;\r\n  cursor: pointer;\r\n  border-radius: 50px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-width: unset;\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  transition: all 0.3s ease;\r\n  background-color: #35363a;\r\n  left: 4px;\r\n  color: #35363a;\r\n  font-weight: bold;\r\n\r\n  ${({ selected }: { selected: boolean }) =>\r\n    selected &&\r\n    css`\r\n      left: 24px;\r\n      background-color: #0dab76;\r\n    `}\r\n`;\r\n\r\ninterface Props {\r\n  selected: boolean;\r\n  onChange: () => void;\r\n  label?: string;\r\n}\r\n\r\nexport const Switch: FC<Props> = ({ selected, onChange, label }) => {\r\n  return (\r\n    <SwitchWrapper>\r\n      <span>{label}</span>\r\n      <ToggleWrapper onClick={onChange}>\r\n        <InnerButton selected={selected}>{selected ? \"✔\" : \"\"}</InnerButton>\r\n      </ToggleWrapper>\r\n    </SwitchWrapper>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface ButtonProps {\r\n  color: string;\r\n  backgroundColor: string;\r\n}\r\n\r\nconst StyledButton = styled.button<ButtonProps>`\r\n  border: none;\r\n  padding: 0.5rem;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  background-color: ${props => props.backgroundColor || \"#ffffff\"};\r\n  color: ${props => props.color || \"#ffffff\"};\r\n  cursor: pointer;\r\n  user-select: none;\r\n  opacity: 0.5;\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  text?: string;\r\n  onClick: () => void;\r\n\r\n  backgroundColor: string;\r\n  color: string;\r\n}\r\n\r\nexport const Button: FC<Props> = ({\r\n  onClick,\r\n  text = \"\",\r\n  ...buttonStyles\r\n}) => {\r\n  return (\r\n    <StyledButton onClick={onClick} {...buttonStyles}>\r\n      {text}\r\n    </StyledButton>\r\n  );\r\n};\r\n","import React, { ChangeEvent, FC } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: inline-flex;\r\n  justify-items: center;\r\n  color: #aaaaaa;\r\n  gap: 16px;\r\n  line-height: 1.8;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: inline-flex;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  appearance: textfield;\r\n  border: none;\r\n  background-color: #1d1d20;\r\n  color: #ffffff;\r\n  padding: 0.5rem;\r\n  text-align: center;\r\n\r\n  opacity: 0.5;\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n\r\n  &::-webkit-inner-spin-button,\r\n  &::-webkit-outer-spin-button {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  &:disabled {\r\n    opacity: 0.2;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  border: none;\r\n  width: 32px;\r\n  height: 32px;\r\n  font-size: 1.1rem;\r\n  background-color: #1d1d20;\r\n  color: #ffffff;\r\n  cursor: pointer;\r\n  opacity: 0.5;\r\n  \r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n  &:disabled {\r\n    opacity: 0.2;\r\n  }\r\n`;\r\n\r\nconst DecrementButton = styled(Button)`\r\n  border-radius: 99px 0 0 99px;\r\n`;\r\n\r\nconst IncrementButton = styled(Button)`\r\n  border-radius: 0 99px 99px 0;\r\n`;\r\n\r\ninterface Props {\r\n  value: number;\r\n  minValue: number;\r\n  maxValue: number;\r\n  label?: string;\r\n  disabled?: boolean;\r\n  onClickIncrement: () => void;\r\n  onClickDecrement: () => void;\r\n  onChange: (value: number) => void;\r\n}\r\n\r\nexport const NumberInput: FC<Props> = ({\r\n  value,\r\n  minValue,\r\n  maxValue,\r\n  label,\r\n  disabled = false,\r\n  onClickIncrement,\r\n  onClickDecrement,\r\n  onChange\r\n}) => {\r\n  const onChangeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const value = parseInt(e.target.value);\r\n\r\n    if (isNaN(value)) {\r\n      return;\r\n    }\r\n\r\n    onChange(\r\n      value < minValue\r\n        ? Math.max(value, minValue)\r\n        : value > maxValue\r\n        ? Math.min(value, maxValue)\r\n        : value\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      {label}\r\n      <ButtonWrapper>\r\n        <DecrementButton onClick={onClickDecrement} disabled={disabled}>−</DecrementButton>\r\n        <Input\r\n          type=\"number\"\r\n          min={minValue}\r\n          max={maxValue}\r\n          value={value}\r\n          onChange={onChangeValue}\r\n          disabled={disabled}\r\n        />\r\n        <IncrementButton onClick={onClickIncrement} disabled={disabled}>+</IncrementButton>\r\n      </ButtonWrapper>\r\n    </Wrapper>\r\n  );\r\n};\r\n","import React, { ChangeEvent, FC, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: inline-flex;\r\n  justify-items: center;\r\n  color: #aaaaaa;\r\n  gap: 16px;\r\n  line-height: 1.8;\r\n`;\r\n\r\nconst RangeIndicator = styled.div`\r\n  position: absolute;\r\n  /* top: 20px; */\r\n  user-select: none;\r\n`;\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst Range = styled.input`\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  opacity: 0.5;\r\n  border-radius: 25px;\r\n  background-color: #1d1d20;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  &:disabled {\r\n    opacity: 0.2;\r\n  }\r\n  &::-webkit-slider-runnable-track {\r\n    width: 100%;\r\n    height: 8px;\r\n    cursor: pointer;\r\n    background: #1d1d20;\r\n    border-radius: 25px;\r\n  }\r\n  &::-webkit-slider-thumb {\r\n    height: 16px;\r\n    width: 16px;\r\n    border-radius: 50%;\r\n    background: #fff;\r\n    cursor: pointer;\r\n    -webkit-appearance: none;\r\n    margin-top: -4px;\r\n  }\r\n\r\n  &::-moz-range-track {\r\n    width: 100%;\r\n    height: 8px;\r\n    cursor: pointer;\r\n    background: #1d1d20;\r\n    border-radius: 25px;\r\n  }\r\n  &::-moz-range-thumb {\r\n    height: 16px;\r\n    width: 16px;\r\n    border-radius: 50%;\r\n    background: #fff;\r\n    cursor: pointer;\r\n    -webkit-appearance: none;\r\n    margin-top: -4px;\r\n  }\r\n\r\n  &:focus::-webkit-slider-runnable-track {\r\n    background: #1d1d20;\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  value: number;\r\n  minValue: number;\r\n  maxValue: number;\r\n  step?: number;\r\n  label?: string;\r\n  disabled?: boolean;\r\n  onChange: (value: number) => void;\r\n}\r\n\r\nexport const RangeInput: FC<Props> = ({\r\n  value,\r\n  onChange,\r\n  minValue,\r\n  maxValue,\r\n  step = 1,\r\n  disabled = false,\r\n  label\r\n}) => {\r\n  const valueIndicatorRef = useRef<HTMLDivElement>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (valueIndicatorRef?.current && inputRef?.current) {\r\n      const newValue = Number(\r\n        ((value - minValue) * 100) / (maxValue - minValue)\r\n      );\r\n      const newPosition = 5 - newValue * 0.2;\r\n      valueIndicatorRef.current.style.left = `calc(${newValue}% + (${newPosition}px))`;\r\n    }\r\n  });\r\n\r\n  const onValueChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    onChange(parseInt(e.target.value));\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      {label}\r\n\r\n      <InputWrapper>\r\n        <Range\r\n          type=\"range\"\r\n          min={minValue}\r\n          max={maxValue}\r\n          step={step}\r\n          value={value}\r\n          onChange={onValueChange}\r\n          ref={inputRef}\r\n          disabled={disabled}\r\n        />\r\n        <RangeIndicator ref={valueIndicatorRef}>{value}</RangeIndicator>\r\n      </InputWrapper>\r\n    </Wrapper>\r\n  );\r\n};\r\n","import React, { FC, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Environment } from \"./components/Environment\";\r\nimport { GridSize } from \"./components/Grid\";\r\nimport { Switch } from \"./components/ui/Switch\";\r\nimport { Button } from \"./components/ui/Button\";\r\nimport { Position } from \"./types/position\";\r\nimport { SimulationStatus } from \"./types/simulationStatus\";\r\nimport { NumberInput } from \"./components/ui/NumberInput\";\r\nimport { RangeInput } from \"./components/ui/RangeInput\";\r\n\r\nconst FullSizeWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-width: 100%;\r\n  min-height: 100vh;\r\n  background-color: #35363a;\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 64px;\r\n  margin: 32px 0;\r\n  align-items: center;\r\n\r\n  @media (min-width: 1024px) {\r\n    flex-direction: row;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst SettingsWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 32px;\r\n  max-width: 400px;\r\n`;\r\n\r\nconst SettingsHeader = styled.div`\r\n  color: #aaaaaa;\r\n  text-align: center;\r\n\r\n  @media (min-width: 1024px) {\r\n    text-align: right;\r\n  }\r\n`;\r\n\r\nconst SettingsContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 10px;\r\n  margin-bottom: 16px;\r\n\r\n  @media (min-width: 1024px) {\r\n    align-items: flex-end;\r\n  }\r\n`;\r\n\r\nconst Title = styled.div`\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Subtitle = styled.span`\r\n  font-size: 0.75rem;\r\n  color: #777777;\r\n`;\r\n\r\nconst Description = styled.p`\r\n  font-size: 0.75rem;\r\n  color: #777777;\r\n  font-style: italic;\r\n`;\r\n\r\nconst Actions = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  gap: 16px;\r\n`;\r\n\r\nconst Link = styled.a`\r\n  color: #0a9dae;\r\n`;\r\n\r\nconst GhostText = styled.span`\r\n  color: #cc5a71;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst PlayerText = styled.span`\r\n  color: #0a9dae;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst GRID_SIZE: GridSize = { width: 10, height: 10 };\r\nconst MIN_GHOST_COUNT = 1;\r\nconst MAX_GHOST_COUNT = 10;\r\nconst MIN_PLAYER_COUNT = 1;\r\nconst MAX_PLAYER_COUNT = 10;\r\nconst MIN_TOMBSTONES_COUNT = 0;\r\nconst MAX_TOMBSTONES_COUNT = 30;\r\nconst EXIT_POSITION: Position = {\r\n  x: Math.floor(GRID_SIZE.width / 2) - 1,\r\n  y: GRID_SIZE.height - 1\r\n};\r\n\r\nexport const App: FC<{}> = () => {\r\n  const [simulationStatus, setSimulationStatus] = useState(\r\n    SimulationStatus.New\r\n  );\r\n  const [displayAgentsViewArea, setDisplayAgentsViewArea] = useState<boolean>(\r\n    false\r\n  );\r\n  const [tombstoneCount, setTombstoneCount] = useState<number>(\r\n    MAX_TOMBSTONES_COUNT / 2\r\n  );\r\n  const [playerCount, setPlayerCount] = useState<number>(MAX_PLAYER_COUNT / 2);\r\n  const [ghostCount, setGhostCount] = useState<number>(MAX_GHOST_COUNT / 2);\r\n  const [resetCount, setResetCount] = useState<number>(0);\r\n  const [simulationSpeed, setSimulationSpeed] = useState<number>(1);\r\n  const [cycleCount, setCycleCount] = useState<number>(0);\r\n\r\n  const toggleSimulationRunningStatus = () => {\r\n    if (simulationStatus === SimulationStatus.New) {\r\n      setSimulationStatus(SimulationStatus.Running);\r\n    } else if (simulationStatus === SimulationStatus.Running) {\r\n      setSimulationStatus(SimulationStatus.Paused);\r\n    } else if (simulationStatus === SimulationStatus.Paused) {\r\n      setSimulationStatus(SimulationStatus.Running);\r\n    }\r\n  };\r\n\r\n  const resetSimulation = () => {\r\n    setSimulationStatus(SimulationStatus.New);\r\n    setResetCount(resetCount + 1);\r\n  };\r\n\r\n  const isSimulationNew = simulationStatus === SimulationStatus.New;\r\n  const isSimulationPaused = simulationStatus === SimulationStatus.Paused;\r\n  const isSimulationRunning = simulationStatus === SimulationStatus.Running;\r\n\r\n  return (\r\n    <FullSizeWrapper>\r\n      <ContentWrapper>\r\n        <SettingsWrapper>\r\n          <SettingsHeader>\r\n            <Title>Ghost in the Graveyard</Title>\r\n            <Subtitle>\r\n              Simulation by{\" \"}\r\n              <Link href=\"https://github.com/Vixan\">\r\n                Duca Vitalie-Alexandru\r\n              </Link>\r\n            </Subtitle>\r\n\r\n            <Description>\r\n              <b>Description: </b>\r\n              The <GhostText>Ghosts</GhostText> \"wander\" around the grid world.\r\n              If a <PlayerText>Player</PlayerText> finds a Ghost, it stops and\r\n              notifies all other Players that a Ghost has been found. The found\r\n              Ghost starts moving towards the closest Player other than the one\r\n              that found it in an attempt to \"catch\" it. If the Ghost catches a\r\n              Player, the latter becomes the Ghost. All Players except the one\r\n              that found the Ghost run to the Exit and disappear from the grid.\r\n            </Description>\r\n          </SettingsHeader>\r\n\r\n          <SettingsContent>\r\n            <Switch\r\n              selected={displayAgentsViewArea}\r\n              onChange={() => setDisplayAgentsViewArea(!displayAgentsViewArea)}\r\n              label=\"Display agents view area\"\r\n            />\r\n            <NumberInput\r\n              minValue={MIN_PLAYER_COUNT}\r\n              maxValue={MAX_PLAYER_COUNT}\r\n              value={playerCount}\r\n              label=\"Player count 🧍‍♂️\"\r\n              onClickDecrement={() =>\r\n                setPlayerCount(Math.max(playerCount - 1, MIN_PLAYER_COUNT))\r\n              }\r\n              onClickIncrement={() =>\r\n                setPlayerCount(Math.min(playerCount + 1, MAX_PLAYER_COUNT))\r\n              }\r\n              onChange={(value: number) => setPlayerCount(value)}\r\n              disabled={!isSimulationNew}\r\n            />\r\n            <NumberInput\r\n              minValue={MIN_GHOST_COUNT}\r\n              maxValue={MAX_GHOST_COUNT}\r\n              value={ghostCount}\r\n              label=\"Ghost count 👻\"\r\n              onClickDecrement={() =>\r\n                setGhostCount(Math.max(ghostCount - 1, MIN_GHOST_COUNT))\r\n              }\r\n              onClickIncrement={() =>\r\n                setGhostCount(Math.min(ghostCount + 1, MAX_GHOST_COUNT))\r\n              }\r\n              onChange={(value: number) => setGhostCount(value)}\r\n              disabled={!isSimulationNew}\r\n            />\r\n            <NumberInput\r\n              minValue={MIN_TOMBSTONES_COUNT}\r\n              maxValue={MAX_TOMBSTONES_COUNT}\r\n              value={tombstoneCount}\r\n              label=\"Tombstone count ⬛\"\r\n              onClickDecrement={() =>\r\n                setTombstoneCount(\r\n                  Math.max(tombstoneCount - 1, MIN_TOMBSTONES_COUNT)\r\n                )\r\n              }\r\n              onClickIncrement={() =>\r\n                setTombstoneCount(\r\n                  Math.min(tombstoneCount + 1, MAX_TOMBSTONES_COUNT)\r\n                )\r\n              }\r\n              onChange={(value: number) => setTombstoneCount(value)}\r\n              disabled={!isSimulationNew}\r\n            />\r\n            <RangeInput\r\n              minValue={1}\r\n              maxValue={3}\r\n              step={1}\r\n              value={simulationSpeed}\r\n              label={\"Simulation speed\"}\r\n              onChange={(value: number) => setSimulationSpeed(value)}\r\n              disabled={!isSimulationNew}\r\n            />\r\n          </SettingsContent>\r\n\r\n          <Actions>\r\n            <Button\r\n              onClick={toggleSimulationRunningStatus}\r\n              backgroundColor={\r\n                isSimulationNew\r\n                  ? \"#0dab76\"\r\n                  : isSimulationPaused\r\n                  ? \"#ffee88\"\r\n                  : \"#1d1d20\"\r\n              }\r\n              color={isSimulationRunning ? \"#aaaaaa\" : \"#000000\"}\r\n              text={\r\n                isSimulationNew\r\n                  ? \"🚀 Start\"\r\n                  : isSimulationRunning\r\n                  ? `⚡ Running (${cycleCount} cycles)`\r\n                  : `⏸ Paused (${cycleCount} cycles)`\r\n              }\r\n            />\r\n\r\n            <Button\r\n              onClick={resetSimulation}\r\n              backgroundColor={\"#1d1d20\"}\r\n              color={\"#aaaaaa\"}\r\n              text={\"🔁 Reset\"}\r\n            />\r\n          </Actions>\r\n        </SettingsWrapper>\r\n\r\n        <Environment\r\n          gridSize={GRID_SIZE}\r\n          playerCount={playerCount}\r\n          ghostCount={ghostCount}\r\n          tombstoneCount={tombstoneCount}\r\n          exitPosition={EXIT_POSITION}\r\n          simulationStatus={simulationStatus}\r\n          displayAgentsViewArea={displayAgentsViewArea}\r\n          resetCount={resetCount}\r\n          simulationSpeed={simulationSpeed}\r\n          incrementCycleCount={() => setCycleCount(cycleCount + 1)}\r\n        />\r\n      </ContentWrapper>\r\n    </FullSizeWrapper>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}